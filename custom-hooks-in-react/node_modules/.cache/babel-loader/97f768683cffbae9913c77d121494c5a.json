{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst useFetch = url => {\n  _s();\n\n  const [fetchedData, setFetchedData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    axios.get(url).then(response => {\n      setFetchedData(response.data);\n      setIsLoading(false);\n    }).catch(err => setError(err));\n  }, []);\n  return [isLoading, fetchedData, error];\n};\n\n_s(useFetch, \"tc+wwEZlcllnUK26vxKTTHbMtqE=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/sarojdahal/Desktop/React JS/custom-hooks-in-react/src/hooks/useFetch.js"],"names":["React","useState","useEffect","axios","useFetch","url","fetchedData","setFetchedData","isLoading","setIsLoading","error","setError","get","then","response","data","catch","err"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACxB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,KAAK,CACFS,GADH,CACOP,GADP,EAEGQ,IAFH,CAESC,QAAD,IAAc;AAClBP,MAAAA,cAAc,CAACO,QAAQ,CAACC,IAAV,CAAd;AACAN,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KALH,EAMGO,KANH,CAMUC,GAAD,IAASN,QAAQ,CAACM,GAAD,CAN1B;AAOD,GARQ,EAQN,EARM,CAAT;AASA,SAAO,CAACT,SAAD,EAAYF,WAAZ,EAAyBI,KAAzB,CAAP;AACD,CAfD;;GAAMN,Q;;AAiBN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst useFetch = (url) => {\n  const [fetchedData, setFetchedData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    axios\n      .get(url)\n      .then((response) => {\n        setFetchedData(response.data);\n        setIsLoading(false);\n      })\n      .catch((err) => setError(err));\n  }, []);\n  return [isLoading, fetchedData, error];\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}